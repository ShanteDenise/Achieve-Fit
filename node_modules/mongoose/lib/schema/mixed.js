/*!
 * Module dependencies.
 */

'use strict';

const SchemaType = require('../schematype');
const symbols = require('./symbols');
const utils = require('../utils');

/**
 * Mixed SchemaType constructor.
 *
 * @param {String***REMOVED*** path
 * @param {Object***REMOVED*** options
 * @inherits SchemaType
 * @api public
 */

function Mixed(path, options) {
  if (options && options.default) {
    const def = options.default;
    if (Array.isArray(def) && def.length === 0) {
      // make sure empty array defaults are handled
      options.default = Array;
    ***REMOVED*** else if (!options.shared && utils.isObject(def) && Object.keys(def).length === 0) {
      // prevent odd "shared" objects between documents
      options.default = function() {
        return {***REMOVED***;
      ***REMOVED***;
    ***REMOVED***
  ***REMOVED***

  SchemaType.call(this, path, options, 'Mixed');

  this[symbols.schemaMixedSymbol] = true;
***REMOVED***

/**
 * This schema type's name, to defend against minifiers that mangle
 * function names.
 *
 * @api public
 */
Mixed.schemaName = 'Mixed';

/*!
 * Inherits from SchemaType.
 */
Mixed.prototype = Object.create(SchemaType.prototype);
Mixed.prototype.constructor = Mixed;

/**
 * Casts `val` for Mixed.
 *
 * _this is a no-op_
 *
 * @param {Object***REMOVED*** value to cast
 * @api private
 */

Mixed.prototype.cast = function(val) {
  return val;
***REMOVED***;

/**
 * Casts contents for queries.
 *
 * @param {String***REMOVED*** $cond
 * @param {any***REMOVED*** [val]
 * @api private
 */

Mixed.prototype.castForQuery = function($cond, val) {
  if (arguments.length === 2) {
    return val;
  ***REMOVED***
  return $cond;
***REMOVED***;

/*!
 * Module exports.
 */

module.exports = Mixed;
